# -*- coding: utf-8 -*-
"""DNA_manipulation_using_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N-BLjtQPxrnOJswPdRS7DEA8PZfGauvU

Create DNA sequence
"""

dna= "ATGGGTACCAAAACGCTGAGCAGAGTGCGAGATGCGAAGCGATCAG"

dna2= "atgacacagatacagatcgtacgctgacgctcagatcgatcgtcgtacagaac"

print(dna)

print(dna2)

"""Converting lower to upper and upper to lowe case"""

dna2_upper=dna2.upper()

print(dna2_upper)



"""Converting upper case to lower case"""

dna_lower=dna.lower()

print(dna_lower)

#Capitalize and upper isn't same capitalize makes first character upper case while upper makes all characters upper-case
dna2.capitalize()

"""Find length of DNA sequence"""

dna_var="ATCGATACAGATCGTGCTCTCGCCGTACGTGACAGTCGCTGGCAGACGATACAGATCGCTCGCTCGCTCGCTGGACAGT"

print(len(dna_var))

"""So the length of DNA is 79 bp

We can count number of bases by using count attribute.

Making a function to count the number of bases in given sequences
"""

def base_count(dna_var):
  adenine=dna_var.count('A')
  thymine=dna_var.count('T')
  cytosine=dna_var.count('C')
  guanine=dna_var.count('G')
  uracile=dna_var.count('U')

  return(f"In the given sequence number of adenine is {adenine} number of guanine is {guanine} number of thymine is {thymine} number of cytosine is {cytosine} and number of uracile is {uracile}")

base_count("ATGTACAGATACAGATACAGATACAGCTGCTCGCTCGCAGCTGCTCGCTCGCTCAGACATACAGCTCGCTCGCCAGACATGCT")

"""Counting te percent GC content in the sequence.

Formula for percent GC content is Count(G + C)/Count(A + T + G + C) * 100%.
"""

def percent_GC_content():
  '''This function gives the gc content of input DNA sequence'''
  sequence=input("Enter yout sequence to calculate percent GC content:")
   
  adenine=sequence.count('A')
  thymine=sequence.count('T')
  cytosine=sequence.count('C')
  guanine=sequence.count('G')

  g_plus_c=guanine+cytosine

  all_count=adenine +thymine +cytosine +guanine

  return(g_plus_c/all_count)*100

percent_GC_content()

"""Calculate purine and prymidine in seq"""

seq="ATTCTCCGCTACAGATCGCTCCAGTCGCTCGCAGTCCGCTCGCTCAGTCGCCACACACACACAGGTCGCTCTACACATATATATAGAT"

#Purines are Adenine and Guanine
#pyrimidine are Thymine and Cytosine

purine=[]
pyrimidine=[]

for every in seq:
  if every == 'A':
    purine.append(every)
  elif every== 'G':
    purine.append(every)
  else:
    pyrimidine.append(every)

print(f"Number of purines {len(purine)} and pyrimidine are {len(pyrimidine)}")

"""However above method is computationally intense and is slow.

Alternate method to count purines and pyrimidines.
"""

seq2="ATTCTCCGCTACAGATCGCTCCAGTCGCTCGCAGTCCGCTCGCTCAGTCGCCACACACACACAGGTCGCTCTACACATATATATAGAT"


adenine=seq2.count('A')
thymine=seq2.count('T')
guanine=seq2.count('G')
cytosine=seq2.count('C')

purine=adenine+guanine
pyrimidine=thymine+cytosine

print("Number of purines is ", purine ,"Number of pyrimidine is", pyrimidine)



#Calculate the percentage of purine in seq

purine_percentage=purine/len(seq2)*100

print(f"Purine percentage in sequence is {purine_percentage}")

