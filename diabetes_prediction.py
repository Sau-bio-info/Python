# -*- coding: utf-8 -*-
"""Diabetes prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Gja3zKHCxvXcGLEO5zV94NXfwsIwYtS

In this notebook I am going to predict, by given features if the given patient have diabetes or not.
"""

#Installing sklearn if required

#!pip install sklearn

#importing required modules 

import numpy as np
import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn import svm

#loading the data

diabetes_data=pd.read_csv("diabetes.csv")

#Seprating labels and features

#diabetes_data.head()
#diabetes_data.info()
#print(diabetes_data.describe())
features=diabetes_data.iloc[:,:8]
print(features.shape)
labels=diabetes_data.iloc[:,8:9]
labels.shape

#checking counts for labels and their mean

labels.value_counts()

diabetes_data.groupby('Outcome').mean()

#Standardizing the data

scaler=StandardScaler()

features=scaler.fit_transform(features)

#Splitting the data into training and testing subsets

X_test,X_train,Y_test,Y_train=train_test_split(features,labels,train_size=0.2,random_state=2,stratify=labels)

#printing train test and original shape

print(features.shape,X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)

#Training the model

cls=svm.SVC(kernel='linear')

#testing accuracy on training data

model=cls.fit(X_train,Y_train)

predictions=cls.predict(X_train)
training_data_accuracy=accuracy_score(predictions,Y_train)
print(training_data_accuracy)

#testing accuracy on test data

test_predict=cls.predict(X_test)
test_data_accuracy=accuracy_score(test_predict,Y_test)
print(test_data_accuracy)

# Making predictions

# Input data as tuple 

input_data=(0,111,40,15,118,45.1,2.288,35)

# Converting to numpy array

input_data_as_np= np.asarray(input_data)


#Reshaping the numpy array

reshaped_input_data=input_data_as_np.reshape(1,-1)


# Normalising the input data


normalised_input_data=scaler.transform(reshaped_input_data)

print(normalised_input_data)


# Prediction


final_prediction=cls.predict(normalised_input_data)


print(final_prediction)

if (final_prediction[0]==0):
  print("Person is non-diabetic")

else:
  print("Person has diabetes")


